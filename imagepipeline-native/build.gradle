/*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

import com.facebook.fresco.buildsrc.Deps
import com.facebook.fresco.buildsrc.TestDeps

apply plugin: 'com.android.library'
apply plugin: 'maven'

dependencies {
    compileOnly Deps.jsr305
    compileOnly Deps.javaxAnnotation
    implementation project(':imagepipeline')
    implementation project(':fbcore')
    implementation Deps.SoLoader.soloader

    testImplementation TestDeps.junit
    testImplementation "org.assertj:assertj-core:${versions.assertjCore}"
    testImplementation "org.mockito:mockito-core:${MOCKITO_CORE_VERSION}"
    testImplementation("org.powermock:powermock-api-mockito2:${POWERMOCK_VERSION}") {
        exclude group: 'org.mockito', module: 'mockito-all'
    }
    testImplementation "org.powermock:powermock-module-junit4:${POWERMOCK_VERSION}"
    testImplementation "org.powermock:powermock-module-junit4-rule:${POWERMOCK_VERSION}"
    testImplementation "org.powermock:powermock-classloading-xstream:${POWERMOCK_VERSION}"
    testImplementation("org.robolectric:robolectric:${ROBOLECTRIC_VERSION}") {
        exclude group: 'commons-logging', module: 'commons-logging'
        exclude group: 'org.apache.httpcomponents', module: 'httpclient'
    }
    testImplementation project(':imagepipeline-base-test')
    testImplementation project(':imagepipeline-test')
}

apply from: rootProject.file('release.gradle')

android {
    def ndkLibs = [
            ['bitmaps', []],
            ['imagepipeline', []],
            ['memchunk', []]]

    buildToolsVersion FrescoConfig.buildToolsVersion
    compileSdkVersion FrescoConfig.compileSdkVersion

    defaultConfig {
        minSdkVersion FrescoConfig.minSdkVersion
        targetSdkVersion FrescoConfig.targetSdkVersion
    }

    sourceSets {
        main {
            jni.srcDirs = []
            jniLibs.srcDirs = ndkLibs.collect { "$buildDir/${it[0]}" }
        }
        test {
            java {
                exclude '**/LocalVideoThumbnailProducerTest.java'
                exclude '**/DecodeProducerTest.java'
                exclude '**/ProgressiveJpegParserTest.java'
                exclude '**/AnimatedImageFactoryTest.java'

            }
            resources {
                exclude '**/BUCK'
            }
        }
    }
    ndkLibs.each { lib -> makeNdkTasks lib[0], lib[1] }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task testJar(type: Jar) {
    from android.sourceSets.test.java.srcDirs
    classifier = 'sources'
}

artifacts.add('archives', sourcesJar)
